CSS enhances the look and feel of the HTML elements.
We can have the CSS code internally as a <style> tag and inside a HTML tab eg: <p style="color:black;font-size=40px;"> in the HTML file.
Obviously we can have a separate file externally with .css extension. The external file means, a .css file inside the same project  or different field. 

Code snippet:
-------------
<selector>{
		color : red; or a hex code color : #1234FF
		font-size : 50px;
		border : 1px solid rgb(190,250,256) 
	}

where, 
selector can be h1,p or any other HTML tags which displays content in the web page.
hex code can be split into three pair as rgb(12,34,FF) with # added at the prefix


Types of selector: refer google://mdn css selector
-----------------=
1. Type selector- eg: h1,p,div. Type selector can be grouped
2. ID Selector- ID attributes. Can't be grouped 
3. Class- selected based on Class attribute. Class selector can be grouped
4. Universal selector- *--> every element in the page gets selected. rarely used and not widely recommended since browser needs to apply the css properities to the entire browser elements.
5. Descendant selector---> identifies a element with the help of parent element. <body><h1> can be defined in css as: body h1{} and body > h1{}--> This selector selects the immediate h1 tag
Note: 
1. Class name can be declared inside a tag. eg: <h1 class=class1 class2 class3>---> class name cannot have a space between then, hence there are three classes decalred
2. Two selectors can've same property
	h1,p{
		color:darkgreen;
		} 
	.highlight.warning{}--> Element which has two calss names and property has to be applied to this particular selector, say <h1 class=highlight warning>

Specificity, Cascade and Inheritance:
-------------------------------------
1. Specificity is prioritizing the css rule that has to be applied. Basic rule of priority is Style sheet selector(not widely used), Id selector, Class/attibute selector and element selector.
   A least proprity selector rule can override the top priority if the rule has  the keyword'!important'
	eg: 
				/*specificity #0001*/
				element-1, element-2{
					color: blue !important;
				}

				.example .element-1{
					color: red;
						}

2. Cascade is like a tie-breaker if there are two css properties has the same speicificity and trying to apply the rule on a same content. Always the latest rule will be applied.

3. Inheritance is that a child element acquires some property of the parent element, but not all property.
	eg. div<class=ele-1>
		<div>
			div<div ele-2>
				Some content
			</div>
		</div>
	</div>

	css:
	.ele-1
	{
		border:1px solid black; 
		color:yellow;
	}
	Here the ele-2 acquire the color property not the border property.


CSS Box:
--------
Every element in HTML is a box which should have a Margin, Border, Padding and width and Height of the content(usually encolosed inside a tag: <p>, <div>, <span> etc.,).
Margin---> is a hidden territory without which the webpage looks ugly
Border---> is something like drawing a container box which encloses other elements
Padding--> makes the actual content indent from the border/margin.
height and width---> defines the size of the box
eg:
p{
	width:200px;
	height:150px;
	padding:30px;
	border:3px solid black;
	margin:10px;
}

Commonly used css units:
------------------------
font-size:1.5em;
denotes the font size of the current element is 1.5X times larger than parent font-size

font-size:2rem;
denotes the font size of the current element is 2X times larger than root element(<html> tag) font-size

width:25%;
denotes 50% width of the parent element width

height:150px;
pixels is most commonly used unit

button{
float:right;
margin-right:240px;
}
float makes the button to move to right of the box and adjusting margin-right to 240px helps to bring the button to the center of the box. floating has disadvantage if the size of the button
is large then it may not fit into the box, which can be overcome by clear:left which expands the box and accomodates the button automatically. float is not advisable always since wrapping is tricky.

Positioning:
-----------
default value is static
position:static;
position:relative; positions the element with respect to the current location at top, bottom, left and right(without these the relative behaves like static).
position:absolute; positions the element with respect to the parent location at top, bottom, left and right.(without these the absolute behaves like static).
position:fixed; similar to absolute but the difference is the location will be fixed with respect to its current position which does not change during page scroll. eg: sticky header and footer.

Flexbox layout:
--------------
This a layout which has a structure of box which in turn contains so many boxes which we refer as items. eg., <header> is a outer box, inside it we have <img rel=logo>, <h1>title</h1> etc.,
syntax:
display:flex;
flex-direction:row;/column(main axis/cross axis in flexbox terminology)
flex-wrap:wrap;
justify-content:flex-start;/flex-end, center etc.,	
align-items: stretch/flex-start/flex-end/center;

Responsive design thorugh media query:
--------------------------------------
This refers to compatability of our application across various devices which operates with drifferent screen resolutions. 















-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************************************************************
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------


Practice HTML concepts explained - get familar with them - read docs on some tags to be comfortable with docs

HW
=============
Lorem Ipsum
sans serif vs serif
03 slectors
02 values

Practice HTML concepts explained - get familar with them - read docs on some tags to be comfortable with docs
- CSS selectors - practice explore the important ones I had mentioned
- Lesson 05 - 02_values - self learning
- Practice specificity, inheritance, cascade
- lorem ipsum - know what it is for
- sans serif vs serif - what are they


1. What are the props will not be inherited by the child
2. Pseudo class
3. read about other selectors
4. flexbox.html

- Practice HTML concepts explained - get familar with them - read docs on some tags to be comfortable with docs
- CSS selectors - practice explore the important ones I had mentioned
- Lesson 05 - 02_values - self learning - short hand notations
- Practice specificity, inheritance, cascade
- lorem ipsum - know what it is for
- sans serif vs serif - what are they
- read about selectors - pseudo selectors
- 04_flexbox.html
- media queries