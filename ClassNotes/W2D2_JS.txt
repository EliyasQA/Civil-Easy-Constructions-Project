Array:
-----
- Array in JS can have diffrent types in a container. eg. arrayVal = ["Eliyas","fareed",33,10.1];
- Array can be extended, also values can be added on any index. 
	eg:
    		let arrStr = ["Eliyas","Fareed",3.14,121];
		arrStr[8]=4.5;
		console.log(arrStr);
	
	o/p:
		["Eliyas",
    		"Fareed",
    		3.14,
    		121,
    		null,
    		null,
    		null,
   		null,
   		4.5]

- array length can be found by 
	console.log(arrStr.length);


Conversions:
-----------
string to array:
	eg: const str1  = "apple,orange,banana,grapes";
	    const arr1 = str1.split(,);
		console.log(arr1);
array to string:
	eg:
		const str2 = arr1.join(",");
		console.log(str2);

Functions:
----------

		push()						pop()
---------------------------------------------|----------------------------------------------------
1. Adds a value at the last index of an array|	Removes the last index of an array.
	eg. arr1.push("guva");		     |		eg. arr1.pop()
	o/p: apple,orange,banana,grapes,guva |		o/p: apple,orange,banana,grapes

		shift()			     |			unshift()
---------------------------------------------------------------------------------------------------
1. Removes the element at the first index    |	Adds an element at the first index
   	eg. console.log(mName);		     |		eg. arr1.unshift("pineapple")
	o/p: orange,banana,grapes,guva	     |		o/p: pineapple,orange,banana,grapes,guva
		     			     |
arr1.indexof("pineapple"); o/p: 0
arr1.includes("pineapple"); o/p: true


ES6 Additional features in Array:
--------------------------------

1) forEach: functional style of programming where for loop is imperative
	arr1.forEach(function(fruit){
        console.log(fruit);
    	})

2) Array Destructuring. Assigning an object for each element of an array which is applicable for small arrays.
	eg: const arr2=["DOg","Cat"];
	    const [dog,cat]=arr2; //equivalent to const [dog,cat]=["DOg","Cat"];

3) Spread Operator: 
   copy an array to another array: const newarr = [...arr1]; o/p: ['pineapple','orange','banana','grapes','guva']
					newarr1=[...newarr,"mango"]; o/p: ['pineapple','orange','banana','grapes','guva'.'mango']
   const arr3 = [...arr1, ...arr2]; o/p:  ['pineapple','orange','banana','grapes','guva','Dog','Cat']
   Normal concatenation: arr1.concat(arr2); o/p: ['pineapple','orange','banana','grapes','guva','Dog','Cat']

4) find(function()):
   find uses another function as an argument, tranverse through the each element of an array untill the first matching element is found.
	eg:
	(1) animals = ["lion","tiger","dogs","elephant"];
		let found = animals.find(function(animal)
		{
    			return animal==="jaquar";
		});
		console.log(found);*/

	(2) let ele=animals.find(function (el) {
    		return el.length >=4 ;
  		});
   		console.log(ele);

5) filter(function())
   Similar to find function filter function finds all the matching elements and filters it in a separate array.
	const filt=animals.filter(function(ele1){
	return ele1.length==4;
	});
	console.log(filt);
	 
	o/p:['lion', 'dogs']

6) map(function())
	map function can apply the business logic on each element of an array. Let it be the length of each element or matching eaching element and store it in array
	const mapele=animals.map(function(ele2){
        // return ele2.length;
    
        if(ele2==="tiger")
            return "asia";
        if(ele2==="lion")
            return "africa";
        else
            return "zoo";});
        console.log(mapele);


Function:
---------
syntax:
	function <anyName>(<args-if required>){
		<businessLogic>
		return <some value-if required>
	}
	
	eg: 
		sum(5,6);//Function Hoisting
		function sum(num1,num2){
		console.log(num1+num2);//Not advisable
		return num1+num2;
		}
		
		let addNum = sum(1,2);//calling the function
		console.log(addNum);

	Function Expression: Not recommended. Funtion hoisting won't work in these kind of declaration
	-------------------
	let sum = function(num1,num2){console.log(num1+num2)};
		sum(1,2);


A function without an argument can get args on the fly and process if business logic is defined in such a way.'
function sum()
{
    console.log(arguments[1]+arguments[0]);
}
sum(4,5);

o/p: 9

Nested Functions:
-----------------
1. Functions can be nested, but varaibles decalred inside child function is limited inside it. 
2. Variable names cannot be reused in nested function which is called Closure in JS.
eg:
function outer(num1,num2)
{
    outerSum = num1+num2;
    function inner(num3=10)
    {
        innerSum=outerSum+num3;
        return innerSum;
    }
    return inner;
}

let innerRef=outer(4,3);//at this variable, only the reference of inner function will be stored
console.log(innerRef());//actually we're calling the inner function with no arguments, hence default value 10 will be taken to consideration. As per closure, it sotres the variables of the previously passed args, i.e 4,3

ES6 Additional features in Functions:
------------------------------------
1) We can define a default value for the args
	eg: function diff(num1=0,num2=0){return (num1-num2);} diff(1) o/p: 1
	    Before ES6: function diff(num1,num2){
			console.log(num1);
			console.log(num2);
			return (num1-num2);}
			diff(3);
			o/p:
			3
			undefined
			NaN

2) Arrow Function: 
	syntax: <funtionName>=(arg1,arg2...if required)=><business logic); //no function keyword and return statement is required to mention explicitly.
	eg: diff=(a,b)=>a-b; //single line arrow function
		console.log(diff(8,6)); 

	eg: sum=(a,b)=>{
		console.log(a,b);
    		return a+b;}//mulitple line arrow function
		console.log(sum(6,5));




Objects:
-------
An Object has properties and methods where properties stores the the values(data) and methods holds the business logic which uses the proerties(functionality).
const obj1={};//curly braces represents obj1 is an object. Like square brackets[] represents an array.

eg:
	const employee={};
	// console.log(employee);o/p:{}//empty object

	const employee1={
	fname:"Eliyas",
	lname:"Fareedudeen",
    	naam: function(){
    	console.log(this.fname+' '+ this.lname);//this keyword is used to invoke the property values
			}
	};

	console.log(employee1);o/p: {fname: 'Eliyas', lname: 'Fareedudeen', naam: Æ’}//methods console is not exposed
	console.log(employee1.fname); o/p: Eliyas
	console.log(employee1["lname"]);o/p: Fareedudeen//used when the property name has space in it. eg:last name:"Fareedudeen";
	employee1.naam();o/p: Eliyas Fareedudeen//make sure to add () when accessing the methods.


Construtor function: // not widley used, but good to know
-------------------
This function is used to create a class which holds the template for an object. A new constructor will have data arguments to create an object using the template.
	eg.
	function Emp(name,age)
	{
		this.fname=name;//this keyword refers to the scope or reference for the object at run time
		this.yrs=age;
		this.getDetails=function(){
						return `This is ${this.fname}. He is ${this.yrs} years old`;//important syntax to note is, here we use backward quote and not a single quote
                    }
	}

	const emp1 = new Emp("James Bond",40);
	console.log(emp1.getDetails());
	const emp2 = new Emp("Pierce Brosnon",60);
	console.log(emp2.getDetails());

	o/p:This is James Bond. He is 40 years old
	    This is Pierce Brosnon. He is 60 years old

In general, we create an object to test the use cases. Some time a nested object can also be created.++++++++===================++++++++++++++++//need to explore more
	eg:
		const obj1 = {
    name:"Eliyas",
    age:"33",
    otherDetails: {
            status:"married",
            child:"daughter",
            getSub:function(){
                    return `He's ${status} and have a ${child}`;
                }
            }
    };

    // const emp1 = obj1.otherDetails;
    // console.log(emp1.getSub);
    // console.log(obj1.otherDetails.getSub());
    obj1.otherDetails.getSub()

ES6 features:
-------------
1) class keyword	
 	eg.
	   class Employee//class is a keyword
	   {
		constructor(name,age){     //constructor is a keyword we should use
				this.fname=name;
				this.age=age;
					}
		getDetails(){
				return `Hi, this is ${this.fname} and I'm ${this.age} years old.`;
				}
		}

	   const emp1=new Employee("Eliyas",33);
	   console.log(emp1.fname);
	   console.log(emp1.getDetails());
		


DOM- Document Object Model
--------------------------
DOM allows us to manipulate and play around the entire HTML and CSS that has been feed into a page to generate the whole look and feel.

How to programatically access DOM using JS?
We can access any element(tag) present inside a html document by using document object.
eg:
	const linkEle=document.querySelector("a");---> doing console fetches this particular element and displays in the web console
	document.getElementByID("<id-name>");--> fetches only the unique element
	document.getElementsByClassName("<class-name>");fetches the collection of element if present, later can be indexed to locate the exact element we want
	
Link can be modified for a specific conditions by accessing the href attributes.
eg: 
	linkEle.href="https://www.fb.com";
	paraEle.innerText="go to Facebook";

Even styles also can be modified
eg:
	paraEle.styles.backgroundColor="cyan";

Also we can create a new element, append it to the existing one and remove a element
eg: 
	const pElement = document.createElement('p');
	pElement.textContent = "Hope you enjoy DOM APIs.";

	const diveElement = document.querySelector('div');
	diveElement.appendChild(pElement);

	const textElement = document.createTextNode(' Use MDN the premier source for web development knowledge.');
	pElement.appendChild(textElement);

	diveElement.removeChild(pElement);
			


		
		



